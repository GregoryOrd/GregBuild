Refactoring and Minor Improvements
-----------------------------------
0a) Create a file system recursion function in the toolkit
    - Same idea as the file reader, pass in a function_ptr to tell what to do an each recursion 
    cycle
0b) Correct Test Finder so the comments in the test line can still be recognized 
   as a test case
0c) Instead of using removeTrailingNewLine() in the plugin loader, create a new toolkit
    function call removeTrailingWhitespace() and use that in it place.
    - In general, make the reading in of input from the order file more robust
    - Stick to our formatting rules, document those rules somewhere, then give a 
    clean error message if we read something in that doesn't follow our formatting rules
    - Improve handling so that order file does not need a newline character at
    the end of the final line
0d) Consider moving TestAndSrcDefinitions from sw/core/fileSystemRecursion to GregTest
    - Should these definitions/concepts belong to the build system of the test framework?
0e) Move ArgListDefs.h into toolkit
    - Rename to ArgList
    - Add a .c file with freeArgList() function
    - Add functions addToEndOfArgList() and removeFromEndOfArgList()
    - Bring printArgList function into this file

   ***********************************************************************************
   * Question: Should we switch from using the ArgList struct to using a linked list *
   * implementation?                                                                 *
   ***********************************************************************************

0f) Move FileOperations into common and fix all of the include paths that depend on it
    - Add isSourceFile(), isObjectFileFromSourceFile() and isTestFile() to this common file
    - Some clean up some of the code in these functions
0g) Split out CompileAndLinkCommandsHelpers from CompileAndLinkCommandsHelpers 
    - Some of the helpers in there right now might also belong in different files 
    in the repo or in the toolkit
0h) Rename/change terminology from "compile" to "link" for the following function names:
    - compileWithObjectFiles()
    - initGccArgsForCompileTestExecutable()
    - initGccArgsForCompileProjectExecutableFromObjectFiles()
0i) Rename from initGccArgsForCompilerToObjectFiles() to:
    initGccArgsForCompileToObjectFiles()
        - Removed "r"
0j) Cleanup LinkedList. Duplication between insert_ll and insert_string_ll can be reduced

Major Improvements
---------------------

1) Make the PROJECT_EXE variable configurable
2) Add a plugin for creating a .hex from the outputted .elf 
   and loading the .hex onto the Arduino through the Atmel ICE 
        - Possible solution is to have the plugin from a .bat file
        that opens the AtmelStudio Command Prompt and gives it the appropriate
        inputs to issue the atprogram command
2) Add in tests for the toolkit
3) Add tests to this repo.
    - Use an earlier version of GregBuild and GregTest to write tests for
      future development of GregBuild and GregTest
    - Introduce some chickens and some eggs, then hope things don't get too weird with that
        - LOL :)
    - Or actually might be better to avoid this and just use a makefile with 
    GregTest that follows the same steps as GregBuild
4) Make GregBuild smart enough to not build files that have not been modified
    - Will likely no to switch the default flag value for the --leave-temp command
    line option
    - Might also be good to rename to --delete-temp
    - Might also be good idea to rename temp dir to build or something
    - Will need to rename and after the functions in the build sequence and
    the functions in PluginFunctions.h
5) Investigate multithreaded approach for execution of test cases
    a) Figure out when the dataset is large enough that multithreading is worth it
    b) Implement logic to swtich between single and multithreaded approach based on this information
6) Can we also use a multithreaded solution for gathering the test and source files?
    a) Split the subdirectories from the top level?
    b) Each thread does a recursion starting from a second level directory and working in?
7) Add ability to build from deeper withing the src file tree
    - Make SRC_DIR constant configurable
8) Documentation Review and Improvements
9) Verify support for different platforms
10) Add a code ananlyzer/profiler
    - Valgrind might be a solution in this area
11) Add a debug build ability