Refactoring and Minor Improvements
-----------------------------------
0a) Create a file system recursion function in the toolkit
    - Same idea as the file reader, pass in a function_ptr to tell what to do an each recursion 
    cycle
0b) Correct Test Finder so the comments in the test line can still be recognized 
   as a test case
0c) Instead of using removeTrailingNewLine() in the plugin loader, create a new toolkit
    function call removeTrailingWhitespace() and use that in it place.
    - In general, make the reading in of input from the order file more robust
    - Stick to our formatting rules, document those rules somewhere, then give a 
    clean error message if we read something in that doesn't follow our formatting rules
    - Improve handling so that order file does not need a newline character at
    the end of the final line
0d) Move FileOperations into common and fix all of the include paths that depend on it
    - Add isSourceFile(), isObjectFileFromSourceFile() and isTestFile() to this common file
    - Some clean up some of the code in these functions
0e) Split out CompileAndLinkCommandsHelpers from CompileAndLinkCommandsHelpers 
    - Some of the helpers in there right now might also belong in different files 
    in the repo or in the toolkit
0f) Cleanup LinkedList. Duplication between insert_ll and insert_string_ll can be reduced
0g) Restructure some directories. Pull a "compiler" directory out of core/application
    - Could maybe move RunTests into core/testMainWriting and then rename it to be 
    a more generic test module instead of specifically writing to TestMain
    - Maybe also move CoreCommandLineOptions to core/main
0h) Combine TestsWereRun and MainFunctionFile into a global variable module
    - Consider moving some of the list variables that are created in
    main() into this global variable module as well
    - Maybe some of the future configuration stuff can live here as well
0i) Remove build sequence step printing for test steps when tests are skipped as
    a result of failed compilation on host 
0j) Refactor CompilerConfiguration into general configuration
    and use it for the other variable that we want to make configurable.
        - Change compiler.config to GregBuild.config
        - Move to common folder so all other files can access the global configuration
        variables

Major Improvements
---------------------

0) Have a list of files that are exlcuded when compiling the tests on the host
    - This is for the situation where target hardware specific files exist
    and our host compiler doesn't know how to handle them when compiling the tests
    - We can make this list known in the configuration file
    - See Configuration.md
1) Make the PROJECT_EXE variable configurable
    - See Configuration.md for steps to accomplish this
2) Add plugin(s) for creating a .hex from the outputted .elf 
   and loading the .hex onto the Arduino through the Atmel ICE 
        - Possible solution is to have the plugin from a .bat file
        that opens the AtmelStudio Command Prompt and gives it the appropriate
        inputs to issue the atprogram command
            - Windows
        - Now with the linux environment, we should be able to do this with
        avrdude
            - Linux
3) Add in tests for the toolkit
4) Add tests to this repo.
    - Use an earlier version of GregBuild and GregTest to write tests for
      future development of GregBuild and GregTest
    - Introduce some chickens and some eggs, then hope things don't get too weird with that
        - LOL :)
    - Or actually might be better to avoid this and just use a makefile with 
    GregTest that follows the same steps as GregBuild
5) Make GregBuild smart enough to not build files that have not been modified
    - Will likely no to switch the default flag value for the --leave-temp command
    line option
    - Might also be good to rename to --delete-temp
    - Might also be good idea to rename temp dir to build or something
    - Will need to rename and after the functions in the build sequence and
    the functions in PluginFunctions.h
6) Investigate multithreaded approach for execution of test cases
    a) Figure out when the dataset is large enough that multithreading is worth it
    b) Implement logic to swtich between single and multithreaded approach based on this information
7) Can we also use a multithreaded solution for gathering the test and source files?
    a) Split the subdirectories from the top level?
    b) Each thread does a recursion starting from a second level directory and working in?
    c) Investigate performance improvements that may result, in larger repos, from using hash tables 
    to store the file lists instead of linked lists\
        c0) Would need to improve the hash table implementation to dynamically scale to a table of any size
            -> Could probably acheive this with external chaining rather than the current collision handling method
            of linear probing
8) Add ability to build from deeper withing the src file tree
    - Make SRC_DIR constant configurable
9) Documentation Review and Improvements
10) Verify support for different platforms
    - Different make files. One for windows, one for linux
11) Add a debug build ability
    - Can this be achieved by simply using -g in the compiler options in the config file?
12) Add a verbose output option
    - Add attributes to BuildSequenceStep that can be used to influence how
    to execution of the step is displayed to the user on the console interface
13) Configurablity for exiting or continuing after failing to compile and run tests
    on the host. Continuing would mean to try to build on the target without any of the 
    tests being run on the host, as it currently does.