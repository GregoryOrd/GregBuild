Small Refactorings / Unscheduled Improvements
-----------------------------------------------
0a) Cleanup compileIntoObjectFiles() with helpers
    - Cleanup same of the booleans in compileTestFiles() and compilerSourceFiles()
    - Cleanup const discarded warnings
0b) Cleanup argsForCompilingToObjectFile() with helpers


Plan for Release 1.0:
------------------------
1) Extend excluding files from both host and target builds to include
   directory paths, as well as any subdirectory under a specific directory name
    - for example, exclude all "drivers" directories on the host build
      and exclude all "stubs" directories on the target build
2) Make the PROJECT_EXE and SRC_DIR variables configurable
3) Add plugin(s) for creating a .hex from the outputted .elf 
   and loading the .hex onto the Arduino through the Atmel ICE 
4) Make the paths to the test framework .so and .h file configurable
    so we can decouple GregBuild from GregTest
5) Documentation Review and Improvements
    5a) Create a "Features List" that keeps track of all of the cool features in
    the program for advertising/showing to other people
6) Explore git tags and prep to make a formal release


Plan for Release 1.1:
------------------------
0) Add in tests for the toolkit
1) Add tests to this repo.
    - Use version 1.0 of GregBuild 
    - Introduce some chickens and some eggs, then hope things don't get too weird with that
2) Dependency management (See DepManagementIdea_Img1.jpg and DepManagementIdea_Img2.jpg)
    - Compiling into libraries base on GBScripts found througout the repo
    - Maintaining a Dependency graph based on these scripts, and linking 
    libraries in an appropriate order based on the dependencies
    - Will probably need a stack data structure implementation
    and a graph data structure implementation in the toolkit
3) Add a config file option to define the behviour when the host and target
    are different.
        - Two Options:
            1) Try to build an executable for both platforms
            2) Try to build an executable for only the target (default)
                Under this option, if it is a --no-test-build, don't compile anything
                for the host. Skip that step in the build sequence or just skip
                the source files loop in the compileIntoObjectFiles() function



Plan for Release 1.2:
------------------------
1) Make GregBuild smart enough to not build files that have not been modified
    - Will likely no to switch the default flag value for the --leave-temp command
    line option
    - Might also be good to rename to --delete-temp
    - Might also be good idea to rename temp dir to build or something
    - Will need to rename and after the functions in the build sequence and
    the functions in PluginFunctions.h
2) Tell the file name as well as the test case name on test failure
3) Add ability to build from deeper withing the src file tree
2) Implement HashTable for storing file lists
    - Will provide more efficient lookups for large sets of files



Plan for Release 1.3:
------------------------
1) Configurablity for exiting or continuing after failing to compile and run tests
    on the host. Continuing would mean to try to build on the target without any of the 
    tests being run on the host, as it currently does.
2) Add a debug build ability
    - Can this be achieved by simply using -g in the compiler options in the config file?
3) Add a verbose output option
    - Add attributes to BuildSequenceStep that can be used to influence how
    to execution of the step is displayed to the user on the console interface
    - Option to print out the source files list and the test files list
     for debugging


Plan for Release 1.4:
-------------------------
1) Multithreaded solution for gathering the test and source files
    a) Split the subdirectories from the top level?
    b) Each thread does a recursion starting from a second level directory and working in?
    c) Investigate performance improvements that may result, in larger repos, from using hash tables 
    to store the file lists instead of linked lists\
        c0) Would need to improve the hash table implementation to dynamically scale to a table of any size
            -> Could probably acheive this with external chaining rather than the current collision handling method
            of linear probing
1) Multithreaded approach for execution of test cases
    a) Figure out when the dataset is large enough that multithreading is worth it
    b) Implement logic to swtich between single and multithreaded approach based on this information


Plan for Release 1.5:
-------------------------
1) Sort alphabetically when printing the list of supported command line options in the
   printSupportedOptions() functions for both CommandLineOptions.h and CommandLineOptions_ll.h
    - Only need CommandLineOptions.h for this project, but might as well do the linked list
    version as well.
    - Both of these header files, along with their implementations, are in the toolkit
2) Verify support for different platforms
    - Different make files. One for windows, one for linux