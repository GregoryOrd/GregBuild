Refactoring and Minor Improvements
-----------------------------------

0a-0) Modify ArgList to use void** instead of char**
    - Can we generalize the arguments used in our build sequence functions to use this ArgList 
    if we make this change?
0a-1) Create file reader in toolkit.
    - Have it loop through a file, reading one line at a time
    - Pass in a function_ptr to run on every iteration
    - Use this to replace addTestCaseToList() in FileAndTestCaseGatherer and
      processOrderConfigEntry() in PluginLoader()
    - Will need a way of passing in a function_ptr that takes in a generic set of arguments
0a-2) Create a file system recursion function in the toolkit
    - Same idea as the file reader, pass in a function_ptr to tell what to do an each recursion 
    cycle
0b) Make SRC_DIR constant configurable
0c) Correct Test Finder so the comments in the test line can still be recognized 
   as a test case
0d) Instead of using removeTrailingNewLine() in the plugin loader, create a new toolkit
    function call removeTrailingWhitespace() and use that in it place.
    - In general, make the reading in of input from the order file more robust
    - Stick to our formatting rules, document those rules somewhere, then give a 
    clean error message if we read something in that doesn't follow our formatting rules
0e) Consider moving TestAndSrcDefinitions from sw/core/fileSystemRecursion to GregTest
    - Should these definitions/concepts belong to the build system of the test framework?

Major Improvements
---------------------

1) Give ability to swap out compilers
    - Improved idea/understanding:
        - To run the tests, we need to compile the TestProject.dll and TestMain executable
        for the host system. Thus we will still use the "host" compiler (currently gcc)
        - Then if we are building for a different target hardware, we need to compile
        with an appropriate compiler for that target (avr-gcc for example)
        - So we need capability to tell if we are building for the "host" hardware
        or a "non-host target" hardware
        - Then, we want to capability to swap out both the "host" compiler and the "target"
        compiler.
2) Add ability to use certain compiler flags during both the host and target
   compliter build sequence steps
    - This could be resource file configurable
3) Add in tests for the toolkit
4) Add tests to this repo.
    - Use an earlier version of GregBuild and GregTest to write tests for
      future development of GregBuild and GregTest
    - Introduce some chickens and some eggs, then hope things don't get too weird with that
        - LOL :)
    - Or actually might be better to avoid this and just use a makefile with 
    GregTest that follows the same steps as GregBuild
5) Make GregBuild smart enough to not build files that have not been modified
    - Will likely no to switch the default flag value for the --leave-temp command
    line option
    - Might also be good to rename to --delete-temp
    - Might also be good idea to rename temp dir to build or something
    - Will need to rename and after the functions in the build sequence and
    the functions in PluginFunctions.h
6) Investigate multithreaded approach for execution of test cases
    a) Figure out when the dataset is large enough that multithreading is worth it
    b) Implement logic to swtich between single and multithreaded approach based on this information
7) Can we also use a multithreaded solution for gathering the test and source files?
    a) Split the subdirectories from the top level?
    b) Each thread does a recursion starting from a second level directory and working in?
8) Add ability to build from deeper withing the src file tree
9) Documentation Review and Improvements
10) Verify support for different platforms
11) Add a code ananlyzer/profiler
    - Valgrind might be a solution in this area
12) Add a debug build ability