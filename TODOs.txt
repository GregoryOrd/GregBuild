Refactoring and Minor Improvements
-----------------------------------
0a) Correct Test Finder so the comments in the test line can still be recognized 
   as a test case
        - /**/ Comments at any point in the line
        - // Comments at the end of the line
0b) Make plugin loader parsing more robust
    - handle whitespace before and after the contents of the param and value strings
0c) Get more memory leaks from valgrind report
0d) Move out of TestAndSrcDefinitions.h and into ObjAndTempDefs.h:
    void determineObjectFilePathUsingListType(int listType, char* objectFileName, const char* compiler, const void* fileList, int index);
    void determineObjectFileNameUsingListType(int listType, char* objectFileName, const void* fileList, int index);
    void determineObjectFileName(char* objectFileName, const char* filePath);
    void tempDirPathFromCompiler(char* dest, const char* compiler);
0e) Should all of the "private" functions that have prototype declarations 
    in the .c file be given the "static" keyword?

Major Improvements
---------------------

1) Have a list of files that are exlcuded when compiling the tests on the host
    - This is for the situation where target hardware specific files exist
    and our host compiler doesn't know how to handle them when compiling the tests
    - We can make this list known in the configuration file
    - See Configuration.md
2) Make the PROJECT_EXE and SRC_DIR variables configurable
3) Add plugin(s) for creating a .hex from the outputted .elf 
   and loading the .hex onto the Arduino through the Atmel ICE 
        - Possible solution is to have the plugin from a .bat file
        that opens the AtmelStudio Command Prompt and gives it the appropriate
        inputs to issue the atprogram command
            - Windows
        - Now with the linux environment, we should be able to do this with
        avrdude
4) Add asserts to GregTest for all standard types (int, double, float) and custom structs when provided with
   a "comparator" function pointer for the customer struct
5) Verify support for different platforms
    - Different make files. One for windows, one for linux
6) Documentation Review and Improvements
7) Explore git tags and prep to make a formal release


//////////////////////////////////////////////////////////////////////
//              Mark this point in time as the 1.0 release          //
//////////////////////////////////////////////////////////////////////


Plan for Release 1.1:
------------------------
1) Add in tests for the toolkit
2) Add tests to this repo.
    - Use version 1.0 of GregBuild 
    - Introduce some chickens and some eggs, then hope things don't get too weird with that
3) Timeout protection for infinite loops/hanging while running test cases 
4) Make GregBuild smart enough to not build files that have not been modified
    - Will likely no to switch the default flag value for the --leave-temp command
    line option
    - Might also be good to rename to --delete-temp
    - Might also be good idea to rename temp dir to build or something
    - Will need to rename and after the functions in the build sequence and
    the functions in PluginFunctions.h
5) Tell the file name as well as the test case name on test failure
6) Change compileIntoTempObjectFiles to compile .c files one at a time
instead of all at once



Plan for Release 1.2:
------------------------
1) Add ability to build from deeper withing the src file tree
2) Implement HashTable for storing file lists
    - Will provide more efficient lookups for large sets of files
3) Configurablity for exiting or continuing after failing to compile and run tests
    on the host. Continuing would mean to try to build on the target without any of the 
    tests being run on the host, as it currently does.
4) Add a debug build ability
    - Can this be achieved by simply using -g in the compiler options in the config file?
5) Add a verbose output option
    - Add attributes to BuildSequenceStep that can be used to influence how
    to execution of the step is displayed to the user on the console interface



Plan for Release 1.3:
------------------------
1) Multithreaded solution for gathering the test and source files
    a) Split the subdirectories from the top level?
    b) Each thread does a recursion starting from a second level directory and working in?
    c) Investigate performance improvements that may result, in larger repos, from using hash tables 
    to store the file lists instead of linked lists\
        c0) Would need to improve the hash table implementation to dynamically scale to a table of any size
            -> Could probably acheive this with external chaining rather than the current collision handling method
            of linear probing



Plan for Release 1.4:
-------------------------
1) Multithreaded approach for execution of test cases
    a) Figure out when the dataset is large enough that multithreading is worth it
    b) Implement logic to swtich between single and multithreaded approach based on this information